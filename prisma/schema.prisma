datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Player {
  id      Int     @id @default(autoincrement())
  name    String
  elo     Int     @default(1000)

  MatchTeamA MatchTeamA[]

  MatchTeamB MatchTeamB[]

  Shot Shot[]
}

model Match {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  teamAmineSide     MatchTeamA[]
  teamRobinSide     MatchTeamB[]
  winnerA   Boolean
  winnerB   Boolean
  status    String   @default("ONGOING") // PENDING | ONGOING | FINISHED

  Shot Shot[]
}

model MatchTeamA {
  match   Match  @relation(fields: [matchId], references: [id])
  matchId Int
  player  Player @relation(fields: [playerId], references: [id])
  playerId Int

  @@id([matchId, playerId])
}

model MatchTeamB {
  match   Match  @relation(fields: [matchId], references: [id])
  matchId Int
  player  Player @relation(fields: [playerId], references: [id])
  playerId Int

  @@id([matchId, playerId])
}

model Shot {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   Int
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  Int
  hit       Boolean
  cup       Int?
  bounceCup Int?     // optional: for bounce shots
  team      String   // optional: 'A' | 'B' if you want
  sequence  Int      @default(0) // the shot order in the match
}

